package org.iota.jota.utils;

import java.util.ArrayList;
import java.util.List;

import org.iota.jota.error.ArgumentException;
import org.iota.jota.model.Transfer;
import org.junit.jupiter.api.RepeatedTest;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class InputValidatorTest {

    private static final String TEST_ADDRESS_WITH_CHECKSUM = "PNGMCSNRCTRHCHPXYTPKEJYPCOWKOMRXZFHH9N9VDIKMNVAZCMIYRHVJIAZARZTUETJVFDMBEBIQE9QTHBFWDAOEFA";
    private static final String
    private static final String TEST_HASH = "OAATQS9VQLSXCLDJVJJVYUGONXAXOFMJOZNSYWRZSWECMXAQQURHQBJNLD9IOFEPGZEPEMPXCIVRX9999";
    private static final String TEST_MESSAGE = "JOTA";
    private static final String TEST_TAG = "JOTASPAM9999999999999999999";

    @Test
    @RepeatedTest(10)
    public void isTrits() {
        // @formatter:off
        int[] trits = new int[] {1,1,-1,-1,1,0,0,1,0,1,1,0,0,-1,1,1,1,0,-1,1,-1,0,1,0,1,0,0,1,1,0,-1,-1,1,1,0,0,0,-1,0,0,1,0,1,1,0,1,1,0,1,-1,1,1,1,0,0,0,1,1,1,0,1,0,0,1,1,0,-1,-1,1,1,0,0,1,0,-1,0,1,0,0,1,0,1,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,-1,1,1,1,0,-1,-1,1,1,0,0,1,-1,1,1,1,0,0,-1,0,0,1,0,-1,0,1,1,1,0,-1,-1,1,1,0,0,1,-1,-1,0,1,0,1,0,0,1,1,0,-1,1,-1,0,1,0,-1,0,1,1,1,0,-1,0,-1,1,0,0,-1,-1,1,1,0,0,0,0,-1,0,1,0,0,1,0,1,1,0,-1,1,0,1,1,0,1,-1,1,1,1,0,-1,1,-1,0,1,0,0,0,-1,0,1,0,-1,0,1,1,1,0,-1,1,-1,0,1,0,-1,0,1,1,1,0,0,0,1,1,1,0,0,-1,1,1,1,0,-1,-1,1,1,0,0,1,-1,-1,0,1,0,1,0,-1,0,1,0,0,-1,0,0,1,0,1,1,0,1,1,0,0,-1,0,0,1,0,1,-1,1,1,1,0,0,0,-1,0,1,0,0,-1,0,0,1,0,-1,1,0,1,1,0,1,1,-1,0,1,0,-1,-1,1,1,0,0,-1,1,-1,0,1,0,0,0,0,1,1,0,0,-1,0,0,1,0,-1,0,1,1,1,0,1,0,-1,1,0,0,-1,-1,1,1,0,0,0,-1,0,-1,1,0,0,0,1,1,1,0,-1,1,0,1,1,0,0,0,-1,0,1,0,-1,-1,1,1,0,0,0,0,0,1,1,0,0,1,0,1,1,0,0,-1,1,1,1,0,-1,1,-1,0,1,0,1,0,0,1,1,0,-1,-1,1,1,0,0,0,0,0,1,1,0,0,1,0,1,1,0,0,-1,1,1,1,0,-1,1,-1,0,1,0,1,0,0,1,1,0,-1,0,-1,1,0,0,-1,-1,1,1,0,0,-1,0,1,1,1,0,0,-1,1,1,1,0,0,-1,0,0,1,0,1,-1,1,1,1,0,-1,0,1,1,1,0,0,-1,0,0,1,0,-1,-1,1,1,1,0,0,0,1,1,1,0,-1,1,-1,0,1,0,-1,-1,1,1,0,0,1,0,1,1,1,0,-1,1,-1,0,1,0,0,0,0,1,1,0,-1,-1,1,1,0,0,1,1,0,1,1,0,-1,-1,0,0,1,0,1,-1,-1,0,1,0,0,-1,1,1,1,0,-1,1,-1,0,1,0,-1,0,1,1,1,0,0,-1,1,1,1,0,1,-1,-1,0,1,0,-1,-1,1,1,0,0,0,-1,0,0,1,0,-1,1,0,1,1,0,-1,0,-1,1,0,0,-1,-1,1,1,0,0,0,0,-1,0,1,0,0,1,0,1,1,0,-1,1,0,1,1,0,1,-1,1,1,1,0,-1,1,-1,0,1,0,0,0,-1,0,1,0,-1,0,1,1,1,0,-1,1,-1,0,1,0,-1,0,1,1,1,0,0,0,1,1,1,0,0,-1,1,1,1,0,-1,-1,1,1,0,0,1,-1,1,1,1,0,-1,1,-1,0,1,0,1,0,-1,0,1,0,-1,-1,1,1,0,0,-1,1,-1,0,1,0,0,1,1,1,1,0,1,0,-1,1,0,0,-1,-1,1,1,0,0,-1,-1,0,-1,1,0,1,-1,-1,0,1,0,-1,1,-1,0,1,0,0,0,-1,0,1,0,-1,1,-1,0,1,0,-1,1,0,1,1,0,1,-1,-1,0,1,0,1,-1,1,1,1,0,-1,-1,1,1,0,0,1,-1,1,1,1,0,0,-1,0,0,1,0,-1,0,1,1,1,0,-1,-1,1,1,0,0,1,-1,-1,0,1,0,1,0,0,1,1,0,-1,1,-1,0,1,0,-1,0,1,1,1,0,-1,-1,1,1,0,0,1,1,0,1,1,0,0,1,0,1,1,0,0,-1,1,1,1,0,-1,0,1,1,1,0,-1,0,1,1,1,0,0,-1,0,0,1,0,-1,0,1,1,1,0,0,1,0,1,1,0,0,-1,1,1,1,0,-1,-1,1,1,0,0,1,0,0,1,1,0,1,-1,-1,0,1,0,0,0,1,1,1,0,0,-1,1,1,1,0,0,-1,0,0,1,0,1,-1,1,1,1,0,-1,0,-1,1,0,0,-1,-1,1,1,0,0,0,-1,0,0,1,0,-1,1,0,1,1,0,-1,-1,1,1,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,1,-1,-1,0,1,0,1,0,0,1,1,0,0,0,-1,0,1,0,0,1,0,1,1,0,0,-1,1,1,1,0,1,1,0,1,1,0,-1,1,-1,0,1,0,0,-1,1,1,1,0,-1,-1,1,1,0,0,1,-1,-1,0,1,0,0,0,1,1,1,0,1,1,-1,0,1,0,0,0,1,1,1,0,-1,1,-1,0,1,0,1,0,-1,1,0,0,-1,-1,1,1,0,0,0,-1,-1,-1,1,0,-1,0,1,1,1,0,0,-1,0,0,1,0,1,-1,-1,0,1,0,1,0,0,1,1,0,-1,-1,1,1,0,0,1,1,0,1,1,0,-1,1,-1,0,1,0,0,0,0,1,1,0,0,0,0,1,1,0,-1,1,-1,0,1,0,-1,1,0,1,1,0,-1,0,1,1,1,0,-1,1,-1,0,1,0,1,-1,1,1,1,0,-1,-1,1,1,1,0,0,0,1,1,1,0,-1,1,-1,0,1,0,-1,-1,1,1,0,0,0,-1,0,0,1,0,-1,1,0,1,1,0,-1,-1,1,1,0,0,1,0,1,1,1,0,-1,1,-1,0,1,0,0,0,0,1,1,0,0,-1,0,0,1,0,-1,0,1,1,1,0,-1,-1,1,1,0,0,0,0,1,1,1,0,-1,0,1,1,1,0,-1,-1,1,1,0,0,1,1,0,1,1,0,-1,1,-1,0,1,0,0,0,0,1,1,0,0,0,0,1,1,0,-1,1,-1,0,1,0,-1,1,0,1,1,0,-1,0,1,1,1,0,-1,1,-1,0,1,0,1,-1,1,1,1,0,-1,-1,1,1,1,0,0,0,1,1,1,0,-1,1,-1,0,1,0,1,0,-1,1,0,0,-1,-1,1,1,0,0,1,1,1,-1,1,0,0,-1,1,1,1,0,1,-1,-1,0,1,0,1,-1,1,1,1,0,-1,-1,1,1,0,0,1,0,-1,0,1,0,0,-1,0,0,1,0,1,1,-1,0,1,0,-1,1,0,1,1,0,0,-1,0,0,1,0,1,-1,1,1,1,0,1,-1,1,1,1,0,0,-1,0,0,1,0,1,0,0,1,1,0,-1,-1,1,1,0,0,-1,-1,1,1,1,0,0,0,1,1,1,0,1,-1,-1,0,1,0,1,0,0,1,1,0,-1,-1,1,1,0,0,0,0,1,1,1,0,-1,0,1,1,1,0,-1,-1,1,1,0,0,0,-1,0,0,1,0,1,0,0,1,1,0,1,1,0,1,1,0,-1,1,-1,0,1,0,0,-1,1,1,1,0,1,0,-1,0,1,0,0,-1,0,0,1,0,-1,1,-1,0,1,0,-1,0,1,1,1,0,-1,-1,1,1,0,0,1,1,0,1,1,0,-1,1,-1,0,1,0,0,0,0,1,1,0,0,0,0,1,1,0,-1,1,-1,0,1,0,-1,1,0,1,1,0,-1,0,1,1,1,0,-1,1,-1,0,1,0,1,-1,1,1,1,0,-1,-1,1,1,1,0,0,0,1,1,1,0,-1,1,-1,0,1,0,1,0,-1,1,0,0,-1,-1,1,1,0,0,-1,0,0,-1,1,0,0,-1,1,1,1,0,0,1,0,1,1,0,0,-1,0,0,1,0,-1,1,0,1,1,0,-1,-1,1,1,0,0,1,-1,-1,0,1,0,0,0,-1,0,1,0,-1,-1,1,1,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,1,-1,-1,0,1,0,1,0,0,1,1,0,0,0,-1,0,1,0,0,1,0,1,1,0,0,-1,1,1,1,0,1,1,0,1,1,0,-1,1,-1,0,1,0,0,-1,1,1,1,0,-1,-1,1,1,0,0,1,0,0,1,1,0,0,-1,0,0,1,0,1,0,-1,1,0,0,-1,-1,1,1,0,0,1,0,-1,-1,1,0,-1,1,0,1,1,0,-1,0,1,1,1,0,-1,1,-1,0,1,0,1,1,-1,0,1,0,-1,1,-1,0,1,0,0,-1,1,1,1,0,-1,-1,1,1,0,0,1,-1,1,1,1,0,0,0,1,1,1,0,1,-1,1,1,1,0,0,0,-1,0,1,0,0,-1,0,0,1,0,1,1,0,1,1,0,0,-1,0,0,1,0,-1,0,1,1,1,0,-1,-1,1,1,0,0,1,-1,1,1,1,0,1,-1,-1,0,1,0,1,1,-1,0,1,0,0,-1,0,0,1,0,-1,0,1,1,1,0,-1,0,1,1,1,0,0,-1,0,0,1,0,1,-1,1,1,1,0,-1,-1,1,1,0,0,1,-1,-1,0,1,0,0,0,1,1,1,0,1,1,-1,0,1,0,0,0,1,1,1,0,-1,1,-1,0,1,0,-1,0,-1,1,0,0,-1,-1,1,1,0,0,-1,-1,1,1,1,0,0,0,1,1,1,0,0,-1,0,0,1,0,1,-1,1,1,1,0,-1,-1,1,1,0,0,-1,1,-1,0,1,0,0,0,0,1,1,0,-1,1,-1,0,1,0,1,0,0,1,1,0,-1,1,-1,0,1,0,-1,1,0,1,1,0,-1,0,1,1,1,0,0,0,1,1,1,0,1,0,0,1,1,0,-1,-1,1,1,0,0,1,0,-1,0,1,0,0,0,1,1,1,0,0,-1,0,0,1,0,-1,-1,1,1,0,0,1,0,1,1,1,0,-1,1,-1,0,1,0,-1,1,0,1,1,0,-1,1,-1,0,1,0,-1,1,0,1,1,0,1,-1,-1,0,1,0,-1,0,1,1,1,0,0,-1,0,0,1,0,1,-1,1,1,1,0,-1,-1,1,1,0,0,0,0,1,1,1,0,-1,0,1,1,1,0,1,0,-1,1,0,0,-1,-1,1,1,0,0,-1,0,0,-1,1,0,-1,-1,0,0,1,0,1,-1,-1,0,1,0,1,-1,1,1,1,0,-1,1,-1,0,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,1,1,1,0,1,-1,1,1,1,0,-1,-1,1,1,0,0,0,-1,0,0,1,0,1,0,-1,0,1,0,-1,-1,1,1,0,0,-1,1,-1,0,1,0,0,0,0,1,1,0,0,-1,0,0,1,0,-1,0,1,1,1,0,-1,-1,1,1,0,0,1,0,0,1,1,0,1,-1,-1,0,1,0,0,0,0,1,1,0,-1,1,-1,0,1,0,1,-1,1,1,1,0,0,0,1,1,1,0,1,-1,-1,0,1,0,1,0,-1,0,1,0,1,-1,-1,0,1,0,-1,0,-1,1,0,0,-1,-1,1,1,0,0,0,0,-1,0,1,0,0,1,0,1,1,0,-1,1,0,1,1,0,1,0,1,1,1,0,1,-1,-1,0,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,-1,0,0,1,0,1,-1,1,1,1,0,-1,-1,1,1,0,0,0,0,0,1,1,0,0,-1,0,0,1,0,-1,0,-1,0,1,0,-1,1,-1,0,1,0,0,-1,1,1,1,0,0,1,0,1,1,0,-1,-1,1,1,0,0,-1,1,-1,0,1,0,1,1,-1,0,1,0,-1,1,-1,0,1,0,-1,0,1,1,1,0,-1,0,-1,1,0,0,-1,-1,1,1,0,0,0,1,-1,0,1,0,0,-1,1,1,1,0,0,-1,0,0,1,0,-1,1,0,1,1,0,1,1,-1,0,1,0,0,-1,0,0,1,0,0,0,0,1,1,0,0,0,0,1,1,0,1,-1,-1,0,1,0,-1,-1,1,1,0,0,1,-1,1,1,1,0,-1,1,-1,0,1,0,1,0,0,1,1,0,1,0,-1,1,0,0,-1,-1,1,1,0,0,1,0,-1,-1,1,0,-1,1,0,1,1,0,-1,-1,1,1,0,0,-1,0,1,1,1,0,0,-1,0,0,1,0,-1,1,0,1,1,0,0,0,-1,0,1,0,0,-1,0,0,1,0,1,0,-1,0,1,0,0,0,1,1,1,0,-1,1,0,1,1,0,-1,0,1,1,1,0,-1,-1,1,1,0,0,1,-1,1,1,1,0,-1,1,-1,0,1,0,1,0,0,1,1,0,1,1,0,1,1,0,-1,1,-1,0,1,0,0,-1,1,1,1,0,-1,-1,1,1,0,0,1,0,0,1,1,0,1,-1,-1,0,1,0,1,-1,1,1,1,0,1,-1,1,1,1,0,1,-1,-1,0,1,0,-1,0,-1,1,0,0,-1,-1,1,1,0,0,-1,1,0,1,1,0,-1,1,-1,0,1,0,0,0,-1,0,1,0,-1,-1,1,1,0,0,1,0,-1,0,1,0,0,-1,0,0,1,0,0,0,-1,0,1,0,-1,0,1,1,1,0,0,0,1,1,1,0,1,0,0,1,1,0,-1,-1,1,1,0,0,1,0,1,1,1,0,-1,1,-1,0,1,0,0,0,0,1,1,0,0,-1,0,0,1,0,-1,0,1,1,1,0,-1,-1,1,1,0,0,-1,-1,0,0,1,0,-1,1,-1,0,1,0,-1,1,0,1,1,0,1,0,-1,0,1,0,0,-1,1,1,1,0,-1,1,-1,0,1,0,0,-1,1,1,1,0,0,-1,0,0,1,0,-1,0,1,1,1,0,-1,-1,1,1,0,0,-1,1,-1,0,1,0,-1,0,1,1,1,0,1,0,-1,1,0,0,-1,-1,1,1,0,0,-1,-1,0,-1,1,0,1,-1,-1,0,1,0,-1,1,-1,0,1,0,0,0,-1,0,1,0,-1,1,-1,0,1,0,-1,1,0,1,1,0,1,-1,-1,0,1,0,1,-1,1,1,1,0,-1,-1,1,1,0,0,1,0,1,1,1,0,-1,1,-1,0,1,0,-1,1,0,1,1,0,-1,1,-1,0,1,0,-1,1,0,1,1,0,1,-1,-1,0,1,0,-1,0,1,1,1,0,0,-1,0,0,1,0,1,-1,1,1,1,0,-1,0,-1,1,0,0,-1,-1,1,1,0,0,0,1,-1,0,1,0,-1,1,-1,0,1,0,0,0,0,1,1,0,0,-1,0,0,1,0,1,-1,1,1,1,0,-1,-1,1,1,0,0,0,0,1,1,1,0,-1,0,1,1,1,0,-1,-1,1,1,0,0,-1,1,-1,0,1,0,0,0,0,1,1,0,-1,1,-1,0,1,0,0,-1,0,0,1,0,0,1,-1,0,1,0,-1,1,-1,0,1,0,-1,1,0,1,1,0,1,0,-1,0,1,0,-1,-1,1,1,0,0,-1,1,-1,0,1,0,0,0,0,1,1,0,-1,1,-1,0,1,0,1,0,0,1,1,0,-1,1,-1,0,1,0,-1,1,0,1,1,0,-1,0,1,1,1,0,0,0,1,1,1,0,1,0,0,1,1,0,-1,0,-1,1,0,0,-1,-1,1,1,0,0,-1,1,-1,0,1,0,-1,1,0,1,1,0,0,-1,0,0,1,0,1,0,0,1,1,0,-1,-1,1,1,0,0,1,0,0,1,1,0,1,-1,-1,0,1,0,0,0,1,1,1,0,0,-1,1,1,1,0,0,-1,0,0,1,0,1,-1,1,1,1,0,-1,-1,1,1,0,0,1,1,0,1,1,0,0,0,1,1,1,0,0,0,0,1,1,0,1,0,1,1,1,0,0,-1,0,0,1,0,-1,1,0,1,1,0,1,-1,-1,0,1,0,0,-1,1,1,1,0,-1,-1,1,1,0,0,1,0,0,1,1,0,0,-1,0,0,1,0,-1,0,-1,1,0,0,-1,-1,1,1,0,0,1,0,0,1,1,0,1,-1,-1,0,1,0,-1,0,1,1,1,0,-1,0,1,1,1,0,0,-1,0,0,1,0,1,-1,1,1,1,0,-1,-1,1,1,0,0,1,1,0,1,1,0,0,1,0,1,1,0,1,-1,1,1,1,0,0,0,1,1,1,0,-1,1,-1,0,1,0,0,-1,1,1,1,0,-1,1,-1,0,1,0,-1,-1,1,1,0,0,1,0,-1,0,1,0,0,1,0,1,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,-1,1,1,1,0,-1,-1,1,1,0,0,-1,1,0,1,1,0,0,0,1,1,1,0,-1,1,0,1,1,0,0,0,-1,0,1,0,-1,-1,1,1,0,0,-1,-1,1,1,1,0,0,0,1,1,1,0,0,-1,0,0,1,0,1,-1,1,1,1,0,-1,-1,1,1,0,0,1,0,0,1,1,0,-1,1,-1,0,1,0,-1,0,1,1,1,0,0,0,1,1,1,0,1,-1,1,1,1,0,1,0,-1,1,0,0,1,0,1,0,0,0,1,1,1,-1,1,0,0,0,0,1,1,0,1,-1,-1,0,1,0,1,-1,1,1,1,0,1,-1,1,1,1,0,-1,-1,1,1,0,0,1,-1,-1,0,1,0,1,1,0,1,1,0,-1,0,1,1,1,0,-1,1,-1,0,1,0,-1,1,0,1,1,0,-1,0,1,1,1,0,-1,-1,1,1,0,0,-1,0,1,1,1,0,1,-1,-1,0,1,0,0,0,-1,0,1,0,0,-1,0,0,1,0,-1,0,1,1,1,0,0,-1,0,0,1,0,-1,-1,1,1,0,0,1,-1,1,1,1,0,0,1,0,1,1,0,0,0,-1,0,1,0,0,-1,0,0,1,0,0,1,0,1,1,0,1,-1,1,1,1,0,-1,-1,1,1,1,0,0,0,1,1,1,0,-1,-1,1,1,0,0,1,-1,-1,0,1,0,1,0,-1,0,1,0,-1,-1,1,1,0,0,0,0,0,1,1,0,0,-1,0,0,1,0,-1,0,1,1,1,0,0,1,0,1,1,0,0,-1,1,1,1,0,1,-1,-1,0,1,0,-1,-1,1,1,0,0,-1,0,1,1,1,0,0,1,0,1,1,0,0,-1,1,1,1,0,-1,-1,1,1,1,0,0,0,1,1,1,0,-1,1,-1,0,1,0,-1,1,0,1,1,0,-1,0,1,1,1,0,-1,-1,1,1,0,0,1,1,0,1,1,0,-1,1,-1,0,1,0,0,-1,1,1,1,0,-1,-1,1,1,0,0,0,0,-1,0,1,0,0,1,0,1,1,0,-1,1,0,1,1,0,0,0,1,1,1,0,-1,0,-1,0,1,0,0,-1,0,0,1,0,1,-1,-1,0,1,0,-1,-1,1,1,0,0,-1,1,0,1,1,0,0,1,0,1,1,0,1,-1,1,1,1,0,-1,0,1,1,1,0,0,-1,1,1,1,0,1,-1,-1,0,1,0,-1,0,-1,1,0,0,-1,-1,1,1,0,0,1,1,0,1,1,0,-1,1,-1,0,1,0,0,-1,1,1,1,0,-1,-1,1,1,0,0,0,-1,0,0,1,0,-1,1,0,1,1,0,0,0,-1,0,1,0,-1,1,-1,0,1,0,1,1,0,1,1,0,-1,0,1,1,1,0,0,1,0,1,1,0,1,-1,1,1,1,0,-1,-1,1,1,0,0,-1,-1,0,0,1,0,0,-1,0,0,1,0,1,0,0,1,1,0,-1,1,-1,0,1,0,-1,1,0,1,1,0,1,-1,-1,0,1,0,-1,1,-1,0,1,0,0,1,0,1,1,0,1,-1,1,1,1,0,1,0,-1,1,0,0,-1,-1,1,1,0,0,0,-1,-1,-1,1,0,-1,0,1,1,1,0,0,-1,0,0,1,0,1,-1,-1,0,1,0,1,0,0,1,1,0,-1,-1,1,1,0,0,0,0,0,1,1,0,1,-1,-1,0,1,0,0,0,-1,0,1,0,0,-1,0,0,1,0,-1,1,0,1,1,0,0,-1,0,0,1,0,1,-1,-1,0,1,0,-1,-1,1,1,0,0,1,0,0,1,1,0,1,-1,-1,0,1,0,0,0,0,1,1,0,-1,1,-1,0,1,0,1,-1,1,1,1,0,0,0,1,1,1,0,1,-1,-1,0,1,0,1,0,-1,0,1,0,1,-1,-1,0,1,0,-1,-1,1,1,0,0,1,-1,0,0,1,0,0,0,1,1,1,0,1,-1,1,1,1,0,-1,0,1,1,1,0,0,1,0,1,1,0,-1,0,-1,1,0,0,-1,-1,1,1,0,0,1,-1,1,1,1,0,-1,1,-1,0,1,0,1,0,-1,0,1,0,-1,-1,1,1,0,0,1,1,-1,0,1,0,0,-1,1,1,1,0,1,-1,-1,0,1,0,1,0,1,1,1,0,0,-1,0,0,1,0,1,0,-1,0,1,0,1,-1,-1,0,1,0,-1,-1,1,1,0,0,0,-1,1,1,1,0,0,-1,0,0,1,0,1,-1,1,1,1,0,0,0,1,1,1,0,1,-1,1,1,1,0,-1,-1,1,1,0,0,0,-1,0,0,1,0,1,-1,-1,0,1,0,0,0,-1,0,1,0,0,0,1,1,1,0,0,0,0,1,1,0,0,-1,0,0,1,0,1,-1,1,1,1,0,-1,-1,1,1,0,0,-1,-1,1,1,1,0,0,0,1,1,1,0,0,-1,0,0,1,0,1,-1,1,1,1,0,1,0,-1,1,0,0,-1,-1,1,1,0,0,-1,0,0,-1,1,0,-1,1,-1,0,1,0,0,0,0,1,1,0,0,0,0,1,1,0,-1,1,-1,0,1,0,-1,1,0,1,1,0,-1,0,1,1,1,0,-1,1,-1,0,1,0,1,-1,1,1,1,0,-1,-1,1,1,1,0,0,0,1,1,1,0,-1,1,-1,0,1,0,-1,-1,1,1,0,0,0,0,0,1,1,0,0,1,0,1,1,0,0,-1,1,1,1,0,-1,1,-1,0,1,0,1,0,0,1,1,0,-1,-1,1,1,0,0,0,0,0,1,1,0,0,-1,0,0,1,0,-1,0,-1,0,1,0,-1,1,-1,0,1,0,0,-1,1,1,1,0,0,1,0,1,1,0,-1,0,-1,1,0,0,-1,-1,1,1,0,0,0,1,-1,0,1,0,-1,1,-1,0,1,0,0,0,1,1,1,0,1,1,-1,0,1,0,0,-1,0,0,1,0,1,-1,-1,0,1,0,-1,0,1,1,1,0,-1,-1,1,1,0,0,1,-1,1,1,1,0,-1,1,-1,0,1,0,1,0,-1,0,1,0,-1,-1,1,1,0,0,-1,1,0,1,1,0,0,-1,0,0,1,0,1,-1,1,1,1,0,0,0,0,1,1,0,-1,-1,1,1,0,0,0,-1,0,0,1,0,1,0,-1,0,1,0,-1,0,-1,1,0,0,-1,-1,1,1,0,0,1,-1,-1,0,1,0,0,0,1,1,1,0,0,0,-1,0,1,0,-1,0,1,1,1,0,0,1,0,1,1,0,0,-1,1,1,1,0,-1,-1,1,1,0,0,-1,1,-1,0,1,0,0,0,1,1,1,0,0,-1,0,0,1,0,1,-1,1,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,1,0,-1,0,1,0,-1,-1,1,1,0,0,1,0,1,1,1,0,-1,1,-1,0,1,0,0,0,0,1,1,0,0,-1,0,0,1,0,-1,0,1,1,1,0,1,0,-1,1,0,0,-1,-1,1,1,0,0,0,-1,0,-1,1,0,0,0,1,1,1,0,-1,1,0,1,1,0,0,0,-1,0,1,0,-1,-1,1,1,0,0,1,-1,1,1,1,0,0,-1,0,0,1,0,-1,0,1,1,1,0,-1,-1,1,1,0,0,1,-1,-1,0,1,0,1,0,0,1,1,0,-1,1,-1,0,1,0,-1,0,1,1,1,0,-1,-1,1,1,0,0,0,1,0,1,1,0,0,-1,1,1,1,0,-1,1,0,1,1,0,1,-1,-1,0,1,0,0,-1,1,1,1,0,-1,1,-1,0,1,0,-1,-1,1,1,0,0,1,-1,-1,0,1,0,-1,1,0,1,1,0,-1,0,1,1,1,0,-1,1,-1,0,1,0,-1,0,-1,1,0,0,-1,-1,1,1,0,0,-1,1,-1,0,1,0,0,0,0,1,1,0,-1,1,-1,0,1,0,0,-1,0,0,1,0,0,1,-1,0,1,0,-1,1,-1,0,1,0,-1,1,0,1,1,0,1,0,-1,0,1,0,-1,-1,1,1,0,0,1,0,-1,0,1,0,1,-1,-1,0,1,0,1,1,0,1,1,0,0,-1,0,0,1,0,-1,0,-1,0,1,0,0,0,1,1,1,0,1,-1,1,1,1,0,-1,-1,1,1,0,0,-1,1,-1,0,1,0,0,1,1,1,1,0,1,0,-1,1,0,0,-1,-1,1,1,0,0,0,-1,0,-1,1,0,1,-1,-1,0,1,0,1,0,0,1,1,0,-1,-1,1,1,0,0,0,-1,0,0,1,0,1,0,0,1,1,0,1,1,0,1,1,0,-1,1,-1,0,1,0,0,-1,1,1,1,0,1,0,-1,0,1,0,0,-1,0,0,1,0,-1,1,-1,0,1,0,-1,0,1,1,1,0,-1,0,-1,1,0,0,-1,-1,1,1,0,0,1,-1,-1,0,1,0,0,-1,1,1,1,0,0,0,-1,0,1,0,0,0,1,1,1,0,-1,-1,1,1,0,0,0,-1,0,0,1,0,-1,1,0,1,1,0,-1,-1,1,1,0,0,0,0,0,1,1,0,1,-1,-1,0,1,0,0,1,0,1,1,0,0,-1,1,1,1,0,-1,1,-1,0,1,0,-1,1,-1,0,1,0,-1,0,1,1,1,0,-1,-1,1,1,0,0,-1,-1,0,0,1,0,-1,1,-1,0,1,0,-1,1,0,1,1,0,1,0,-1,0,1,0,0,-1,1,1,1,0,-1,1,-1,0,1,0,0,-1,1,1,1,0,0,-1,0,0,1,0,-1,0,1,1,1,0,-1,0,-1,1,0,0,-1,-1,1,1,0,0,0,0,0,1,1,0,0,1,0,1,1,0,0,-1,1,1,1,0,-1,1,-1,0,1,0,1,0,0,1,1,0,-1,-1,1,1,0,0,-1,1,-1,0,1,0,0,1,1,1,1,0,-1,-1,1,1,0,0,0,0,0,1,1,0,0,1,0,1,1,0,-1,0,-1,0,1,0,0,1,0,1,1,0,0,-1,1,1,1,0,-1,0,1,1,1,0,0,-1,0,0,1,0,1,-1,1,1,1,0,-1,-1,1,1,0,0,-1,1,-1,0,1,0,0,1,1,1,1,0,-1,0,-1,1,0,0,-1,-1,1,1,0,0,1,-1,1,1,1,0,0,1,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,-1,0,0,1,0,0,0,-1,0,1,0,0,-1,0,0,1,0,-1,0,1,1,1,0,0,0,1,1,1,0,1,0,-1,0,1,0,0,-1,0,0,1,0,-1,1,0,1,1,0,-1,-1,1,1,0,0,1,1,-1,0,1,0,0,-1,1,1,1,0,1,-1,-1,0,1,0,1,0,1,1,1,0,0,-1,0,0,1,0,1,0,-1,0,1,0,1,-1,-1,0,1,0,-1,-1,1,1,0,0,-1,1,0,1,1,0,0,-1,0,0,1,0,1,-1,1,1,1,0,0,0,0,1,1,0,-1,-1,1,1,0,0,1,0,-1,0,1,0,0,1,0,1,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,-1,1,1,1,0,-1,-1,1,1,0,0,0,-1,0,0,1,0,1,0,-1,0,1,0,-1,-1,1,1,0,0,-1,1,-1,0,1,0,-1,1,0,1,1,0,0,-1,0,0,1,0,1,0,0,1,1,0,1,0,-1,1,0,0,-1,-1,1,1,0,0,1,0,-1,-1,1,0,-1,1,0,1,1,0,-1,-1,1,1,0,0,1,-1,-1,0,1,0,-1,0,1,1,1,0,-1,-1,1,1,0,0,-1,0,1,1,1,0,0,0,1,1,1,0,0,-1,1,1,1,0,1,1,0,1,1,0,0,-1,0,0,1,0,1,-1,1,1,1,0,-1,-1,1,1,0,0,1,-1,-1,0,1,0,0,-1,1,1,1,0,0,0,-1,0,1,0,0,0,1,1,1,0,1,0,-1,1,0,0,-1,-1,1,1,0,0,-1,0,0,-1,1,0,-1,-1,0,0,1,0,1,-1,-1,0,1,0,1,-1,1,1,1,0,-1,1,-1,0,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,1,1,1,0,1,-1,1,1,1,0,-1,-1,1,1,0,0,-1,1,-1,0,1,0,1,1,-1,0,1,0,-1,1,-1,0,1,0,1,-1,1,1,1,0,-1,0,1,1,1,0,1,-1,-1,0,1,0,1,-1,1,1,1,0,-1,-1,1,1,0,0,-1,0,1,1,1,0,0,1,0,1,1,0,0,-1,1,1,1,0,-1,0,1,1,1,0,0,1,0,1,1,0,0,-1,1,1,1,0,-1,-1,1,1,0,0,0,-1,0,0,1,0,1,1,0,1,1,0,1,-1,1,1,1,0,0,0,1,1,1,0,1,0,0,1,1,0,1,0,-1,1,0,0,-1,-1,1,1,0,0,-1,-1,-1,-1,1,0,0,1,0,1,1,0,-1,1,0,1,1,0,-1,1,-1,0,1,0,0,0,-1,0,1,0,-1,-1,1,1,0,0,-1,1,-1,0,1,0,0,0,1,1,1,0,0,-1,0,0,1,0,1,-1,1,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,1,0,-1,0,1,0,-1,-1,1,1,0,0,0,1,0,1,1,0,1,0,-1,0,1,0,0,-1,0,0,1,0,0,1,0,1,1,0,-1,-1,1,1,0,0,0,0,1,1,1,0,-1,0,1,1,1,0,-1,-1,1,1,0,0,1,0,-1,0,1,0,0,-1,0,0,1,0,1,-1,-1,0,1,0,1,0,0,1,1,0,-1,-1,1,1,0,0,-1,0,-1,0,1,0,0,0,0,1,1,0,1,-1,-1,0,1,0,-1,1,0,1,1,0,1,0,-1,0,1,0,0,-1,0,0,1,0,-1,0,1,1,1,0,-1,-1,1,1,0,0,1,-1,-1,0,1,0,0,0,0,1,1,0,0,-1,0,0,1,0,-1,-1,1,1,1,0,0,0,1,1,1,0,-1,1,-1,0,1,0,-1,0,1,1,1,0,1,0,-1,1,0,0,-1,-1,1,1,0,0,1,1,1,-1,1,0,0,-1,1,1,1,0,1,-1,-1,0,1,0,1,-1,1,1,1,0,-1,-1,1,1,0,0,1,-1,-1,0,1,0,-1,0,1,1,1,0,-1,-1,1,1,0,0,0,0,-1,0,1,0,0,1,0,1,1,0,-1,1,0,1,1,0,1,-1,1,1,1,0,-1,1,-1,0,1,0,-1,-1,1,1,1,0,0,0,1,1,1,0,1,-1,-1,0,1,0,-1,0,1,1,1,0,-1,-1,1,1,0,0,-1,0,1,1,1,0,0,0,1,1,1,0,0,-1,1,1,-1,1,-1,-1,1,0,0,0,1,-1,1,0,-1,1,0,0,0,-1,0,1,0,1,0,-1,-1,-1,-1,1,-1,0,1,0,-1,1,1,0,-1,0,-1,1,-1,0,1,-1,-1,1,1,-1,-1,0,1,1,1,0,1,1,0,1,-1,0,1,0,1,-1,-1,1,0,1,0,1,1,1,-1,1,0,0,0,-1,1,0,1,1,-1,1,0,0,1,0,1,0,-1,-1,-1,0,-1,-1,0,0,-1,-1,1,0,0,-1,0,-1,-1,0,0,-1,1,0,0,1,0,1,0,0,1,-1,1,-1,0,1,0,-1,0,0,0,-1,-1,1,0,0,1,1,-1,-1,1,-1,-1,1,-1,1,-1,1,1,-1,0,1,-1,0,0,-1,0,1,1,0,1,1,-1,1,0,1,1,0,-1,0,1,-1,0,1,0,1,-1,0,0,0,1,0,1,0,0,0,1,-1,0,1,1,1,-1,1,0,-1,1,-1,1,1,-1,-1,1,-1,1,1,0,0,-1,0,1,1,0,1,-1,0,1,0,-1,1,-1,1,1,-1,0,-1,0,0,0,0,0,-1,0,-1,1,-1,1,-1,-1,1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,1,1,1,-1,-1,1,1,0,-1,0,-1,-1,1,1,1,-1,-1,1,0,0,0,-1,1,-1,1,0,0,1,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-1,0,0,-1,1,0,-1,0,0,1,-1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,1,-1,1,0,0,1,1,0,1,1,-1,0,1,1,0,1,1,0,0,-1,1,0,0,1,-1,1,1,0,-1,-1,1,0,1,0,1,1,0,1,1,0,-1,0,-1,1,-1,0,-1,-1,0,-1,1,0,0,-1,-1,-1,0,0,1,-1,0,-1,1,1,-1,1,-1,1,0,0,1,0,0,0,0,0,-1,1,-1,0,0,1,-1,1,1,-1,0,-1,-1,1,0,-1,1,-1,0,1,0,1,1,-1,0,1,-1,1,0,0,-1,0,0,0,1,-1,1,-1,1,1,1,0,0,1,1,0,-1,0,0,1,1,1,-1,0,0,-1,0,1,0,0,-1,-1,-1,0,1,1,1,1,-1,1,0,-1,-1,1,1,1,0,-1,0,0,1,0,1,-1,0,1,1,1,1,0,0,0,1,1,-1,1,0,-1,0,1,-1,1,-1,0,1,-1,-1,0,-1,-1,0,-1,0,-1,1,1,-1,0,0,0,1,-1,1,1,-1,-1,-1,0,1,0,1,1,0,-1,-1,1,0,-1,1,0,0,1,0,1,-1,-1,-1,-1,-1,0,0,0,1,0,-1,1,0,0,-1,-1,-1,0,1,-1,-1,1,-1,1,0,0,0,-1,1,-1,0,0,1,-1,1,1,0,-1,1,1,-1,1,0,-1,1,0,-1,1,1,0,0,1,1,-1,1,-1,-1,0,-1,1,-1,-1,1,-1,0,-1,-1,0,0,1,0,-1,0,-1,-1,0,1,-1,0,-1,1,1,0,0,1,1,1,0,-1,-1,-1,-1,-1,0,0,0,1,1,1,-1,1,-1,0,1,-1,0,1,-1,0,1,1,1,0,-1,1,0,-1,0,0,-1,1,0,1,-1,1,1,0,-1,-1,1,0,1,-1,-1,0,1,0,-1,0,0,0,0,0,1,1,1,0,-1,-1,0,-1,0,-1,-1,1,-1,-1,1,0,-1,-1,0,-1,0,1,0,0,-1,0,0,-1,1,0,1,1,-1,0,-1,1,1,0,-1,0,0,1,1,0,-1,-1,-1,0,-1,0,1,0,1,0,1,-1,1,0,0,-1,-1,-1,1,0,0,0,0,0,1,-1,-1,1,-1,-1,0,0,1,0,0,1,1,0,-1,-1,0,0,1,1,-1,0,1,-1,0,-1,0,1,1,0,1,1,0,-1,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,-1,0,1,-1,1,0,0,1,1,1,1,1,0,-1,0,1,1,0,-1,1,1,-1,1,-1,-1,1,-1,1,1,-1,-1,0,1,0,1,-1,0,-1,-1,-1,1,1,-1,1,-1,0,0,1,1,1,1,-1,1,0,1,-1,-1,-1,-1,1,0,1,-1,0,1,0,1,1,0,-1,-1,1,0,1,-1,1,0,-1,1,0,0,0,0,-1,-1,-1,0,0,0,0,-1,1,0,-1,-1,0,0,-1,-1,-1,-1,1,-1,1,0,1,1,0,-1,-1,-1,0,0,0,-1,0,-1,0,1,1,-1,-1,1,0,0,-1,-1,1,-1,0,-1,0,1,0,0,0,0,-1,0,-1,-1,-1,1,0,1,0,0,0,0,1,0,1,-1,-1,0,0,1,1,1,0,-1,0,0,1,0,1,1,0,1,-1,0,-1,-1,1,-1,-1,0,-1,0,1,0,1,-1,0,0,-1,1,-1,1,0,0,0,-1,-1,1,0,1,1,1,1,-1,1,-1,0,0,-1,1,-1,-1,1,-1,1,1,-1,-1,1,-1,0,0,1,-1,-1,-1,0,-1,1,-1,-1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,-1,-1,0,-1,-1,1,1,0,-1,0,-1,-1,1,1,1,-1,-1,1,0,0,0,-1,1,-1,1,0,0,1,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,-1,-1,1,1,1,0,0,0,-1,0,-1,1,0,-1,1,1,0,1,1,1,-1,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,0,-1,0,1,0,-1,0,1,-1,1,1,0,1,-1,1,-1,-1,1,-1,-1,1,0,-1,1,-1,1,-1,-1,0,1,0,0,-1,1,-1,0,1,0,1,-1,-1,1,1,0,1,0,-1,0,-1,1,0,0,-1,1,1,0,1,-1,1,-1,0,1,1,-1,1,-1,-1,-1,-1,-1,1,1,-1,-1,1,0,1,-1};
        // @formatter:on
        long time = System.nanoTime();
        int num = 5;

        System.out.println(time);
        for (int i=0; i<num; i++) {
            InputValidator.isTrits(trits);
        }
        long end = System.nanoTime();
        System.out.println("average of " + num + ": " + ((end-time) / num));
    }

    @Test
    public void shouldIsAddress() {
        assertTrue(InputValidator.isAddress(TEST_ADDRESS_WITH_CHECKSUM));
    }

    @Test
    public void shouldCheckAddress() throws ArgumentException {
        assertTrue(InputValidator.checkAddress(TEST_ADDRESS_WITH_CHECKSUM));
    }

    @Test
    public void shouldIsTrytes() {
        assertTrue(InputValidator.isTrytes(TEST_TRYTES, TEST_TRYTES.length()));
    }

    @Test
    public void shouldIsValue() {
        assertTrue(InputValidator.isValue("1234"));
    }

    @Test
    public void shouldIsArrayOfHashes() {
        assertTrue(InputValidator.isArrayOfHashes(new String[]{TEST_HASH, TEST_HASH}));
    }

    @Test
    public void shouldIsArrayOfTrytes() {
        assertEquals(InputValidator.isArrayOfTrytes(new String[]{TEST_TRYTES, TEST_TRYTES}), true);
    }
    
    @Test
    public void shouldInvalidTxTrytes() {
        // We fail on having value above max supply
        assertFalse(InputValidator.isArrayOfRawTransactionTrytes(new String[]{TEST_TRYTES, TEST_TRYTES}));
    }

    @Test
    public void shouldIsNinesTrytes() {
        assertTrue(InputValidator.isNinesTrytes("999999999", 9));
    }

    @Test
    public void shouldIsValidTransfer() throws ArgumentException {
        List<Transfer> transfers = new ArrayList<>();
        transfers.add(new Transfer(TEST_ADDRESS_WITH_CHECKSUM, 0, TEST_MESSAGE, TEST_TAG));
        assertTrue(InputValidator.isValidTransfer(transfers.get(0)));
    }

    @Test
    public void shouldIsTransfersCollectionValid() throws ArgumentException {
        List<Transfer> transfers = new ArrayList<>();
        transfers.add(new Transfer(TEST_ADDRESS_WITH_CHECKSUM, 0, TEST_MESSAGE, TEST_TAG));
        transfers.add(new Transfer(TEST_ADDRESS_WITH_CHECKSUM, 0, "", ""));
        transfers.add(new Transfer(TEST_ADDRESS_WITH_CHECKSUM, 0));
        assertTrue(InputValidator.isTransfersCollectionValid(transfers));
    }
}